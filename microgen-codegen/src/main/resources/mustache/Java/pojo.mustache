{{>classJavadoc}}
{{#discriminator}}{{>typeInfoAnnotation}}{{/discriminator}}
@org.immutables.value.Value.Immutable
@org.immutables.value.Value.Style(
        defaultAsDefault = true,
        typeBuilder = "*InternalBuilder",
        implementationNestedInBuilder = true,
        overshadowImplementation = true,
        validationMethod = org.immutables.value.Value.Style.ValidationMethod.VALIDATION_API,
        jacksonIntegration = false,
        passAnnotations = { javax.json.bind.annotation.JsonbProperty.class},
        jdkOnly = true
){{#additionalAnnotations}}
{{{additionalAnnotations}}}{{/additionalAnnotations}}
{{>generatedAnnotation}}
public abstract class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{

{{#vars}}
    {{#isEnum}}
    {{^isContainer}}
{{>modelInnerEnum}}
    {{/isContainer}}
    {{/isEnum}}
    {{#items.isEnum}}
        {{#items}}
        {{^isContainer}}
{{>modelInnerEnum}}
        {{/isContainer}}
        {{/items}}
    {{/items.isEnum}}
    {{>methodJavadoc}}
    {{>beanValidation}}
    {{#vendorExtensions.extraAnnotation}}
    {{{vendorExtensions.extraAnnotation}}}
    {{/vendorExtensions.extraAnnotation}}
    @javax.json.bind.annotation.JsonbProperty("{{baseName}}")
    public abstract {{#required}}{{{datatypeWithEnum}}} {{getter}}();{{/required}}{{^required}}java.util.Optional<{{{datatypeWithEnum}}}> {{getter}}();{{/required}}

{{/vars}}

    public static class Builder extends {{classname}}InternalBuilder {
    }

    public static Builder builder() {
        return new Builder();
    }
}
