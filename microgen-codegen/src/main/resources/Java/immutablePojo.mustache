{{>classJavadoc}}
{{#discriminator}}{{>typeInfoAnnotation}}{{/discriminator}}{{#additionalAnnotations}}
    {{{additionalAnnotations}}}{{/additionalAnnotations}}
@javax.json.bind.annotation.JsonbPropertyOrder({
{{#vars}}
    {{classname}}.JSON_PROPERTY_{{nameInSnakeCase}}{{^-last}},{{/-last}}
{{/vars}}
})
{{>generatedAnnotation}}
public final class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#vars}}
    {{#isEnum}}
        {{^isContainer}}
            {{>modelInnerEnum}}
        {{/isContainer}}
    {{/isEnum}}
    {{#items.isEnum}}
        {{#items}}
            {{^isContainer}}
                {{>modelInnerEnum}}
            {{/isContainer}}
        {{/items}}
    {{/items.isEnum}}
    {{>beanValidation}}
    private final {{{datatypeWithEnum}}} {{name}};

    public static final String JSON_PROPERTY_{{nameInSnakeCase}} = "{{baseName}}";
    
{{/vars}}

    @javax.json.bind.annotation.JsonbCreator
    public {{classname}}(
    {{#vars}}
        @javax.json.bind.annotation.JsonbProperty("{{baseName}}")
        final {{{datatypeWithEnum}}} {{name}}{{#hasMore}},{{/hasMore}}
    {{/vars}}
    ) {
        {{#vars}}   
        this.{{name}} = {{name}};
        {{/vars}}
    }
{{#vars}}
    
    {{>methodJavadoc}}
    {{#vendorExtensions.extraAnnotation}}
        {{{vendorExtensions.extraAnnotation}}}
    {{/vendorExtensions.extraAnnotation}}
    @javax.json.bind.annotation.JsonbProperty("{{baseName}}")
    public {{{datatypeWithEnum}}} {{#isBoolean}}is{{/isBoolean}}{{getter}}() {
        return {{name}};
    }

{{/vars}}

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }{{#hasVars}}
        {{classname}} {{classVarName}} = ({{classname}}) o;
        return {{#vars}}{{#isByteArray}}java.util.Arrays{{/isByteArray}}{{#isBinary}}java.util.Arrays{{/isBinary}}{{^isByteArray}}{{^isBinary}}java.util.Objects{{/isBinary}}{{/isByteArray}}.equals(this.{{name}}, {{classVarName}}.{{name}}){{#hasMore}} &&
    {{/hasMore}}{{/vars}}{{#parent}} &&
        super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
        return {{#parent}}super.equals(o){{/parent}}{{^parent}}true{{/parent}};{{/hasVars}}
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash({{#vars}}{{^isByteArray}}{{^isBinary}}{{name}}{{/isBinary}}{{/isByteArray}}{{#isByteArray}}java.util.Arrays.hashCode({{name}}){{/isByteArray}}{{#isBinary}}java.util.Arrays.hashCode({{name}}){{/isBinary}}{{#hasMore}}, {{/hasMore}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}});
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class {{classname}} {\n");
        {{#parent}}sb.append("    ").append(toIndentedString(super.toString())).append("\n");{{/parent}}
        {{#vars}}sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
        {{/vars}}sb.append("}");
        return sb.toString();
    }

    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
        return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static Builder builder() {
        return Builder.create();
    }

    {{>builder}}
}